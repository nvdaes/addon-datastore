name: Send json file

on:
  issues:
    types: 
      - opened
      - reopened
      - edited

jobs:
  check-addon:
    name: Check add-on
    runs-on: windows-latest
    steps:
    - name: Get data
      id: get-data
      uses: actions/github-script@v5
      with:
        script: |
          const body = context.payload.issue.body   
          const downloadUrl = body.split("### Download URL")[1].split("###")[0].trim()
          core.setOutput('downloadUrl', downloadUrl)
          const sourceUrl = body.split("### Source URL")[1].split("###")[0].trim()
          core.setOutput('sourceUrl', sourceUrl)
          const channel = body.split("### Channel")[1].split("###")[0].trim()
          core.setOutput('channel', channel)
          const publisher = context.payload.sender.login
          core.setOutput('publisher', publisher)
    - name: Checkout datastore repo
      uses: actions/checkout@v2
    - name: Checkout validate repo
      uses: actions/checkout@v2
      with:
        repository: nvdaes/addon-datastore-validation
        path: addon-datastore-validation
        submodules: true
    - name: Set up Python 3.8
      uses: actions/setup-python@v2
      with:
        python-version: 3.8
    - name: Download add-on
      run: curl --location --output addon.nvda-addon ${{ steps.get-data.outputs.downloadUrl }}
    - name: Create json file
      run: addon-datastore-validation/runcreatejson addon.nvda-addon
      shell: cmd
    - name: Dump json
      run: |
        import os
        import json
        jsonFile = os.path.join(os.path.dirname(__file__), "addon-datastore-validation", "output", "output.json")
        with open(jsonFile, "rt") as f:
          data = f.load()
          data["sourceUrl"] = ${ steps.get-data.outputs.sourceUrl }}
          data["publisher"] = ${ steps.get-data.outputs.publisher }}
          dir = data["addonId"]
          version = data["addonVersionNumber"].split(".")
          stringVersion = [str(int) for int in version]
          filename = ".".join(stringVersion, "json")
          if os.path.isfile(os.path.join(os.path.dirname(__file__), "addons", dir, filename)):
            raise ValueError("Submission has been sent before")
          if not os.path.isdir(os.path.join(os.path.dirname(__file__), "addons", dir)):
            os.makedirs(dir)
          outputFile = os.path.join(os.path.dirname(__file__), dir, filename)
      shell: python-
